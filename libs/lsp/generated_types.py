# AUTOGENERATED! DO NOT TOUCH MY MACH!
from typing import List, Literal, TypedDict, Union
from enum import Enum

class SemanticTokenTypes(Enum):
	"""
A set of predefined token types. This set is not fixed
an clients can specify additional token types via the
corresponding client capabilities.

@since 3.16.0
"""
	Namespace='namespace'
	Type='type'
	"""
Represents a generic type. Acts as a fallback for types which can't be mapped to
a specific type like class or enum.
"""
	Class='class'
	Enum='enum'
	Interface='interface'
	Struct='struct'
	TypeParameter='typeParameter'
	Parameter='parameter'
	Variable='variable'
	Property='property'
	EnumMember='enumMember'
	Event='event'
	Function='function'
	Method='method'
	Macro='macro'
	Keyword='keyword'
	Modifier='modifier'
	Comment='comment'
	String='string'
	Number='number'
	Regexp='regexp'
	Operator='operator'
	Decorator='decorator'
	"""
@since 3.17.0
"""

class SemanticTokenModifiers(Enum):
	"""
A set of predefined token modifiers. This set is not fixed
an clients can specify additional token types via the
corresponding client capabilities.

@since 3.16.0
"""
	Declaration='declaration'
	Definition='definition'
	Readonly='readonly'
	Static='static'
	Deprecated='deprecated'
	Abstract='abstract'
	Async='async'
	Modification='modification'
	Documentation='documentation'
	DefaultLibrary='defaultLibrary'

class ErrorCodes(Enum):
	"""
Predefined error codes.
"""
	ParseError=-32700
	InvalidRequest=-32600
	MethodNotFound=-32601
	InvalidParams=-32602
	InternalError=-32603
	JsonrpcReservedErrorRangeStart=-32099
	"""
This is the start range of JSON RPC reserved error codes.
It doesn't denote a real error code. No application error codes should
be defined between the start and end range. For backwards
compatibility the `ServerNotInitialized` and the `UnknownErrorCode`
are left in the range.

@since 3.16.0
"""
	ServerErrorStart=-32099
	"""
@deprecated use  jsonrpcReservedErrorRangeStart
"""
	ServerNotInitialized=-32002
	"""
Error code indicating that a server received a notification or
request before the server has received the `initialize` request.
"""
	UnknownErrorCode=-32001
	JsonrpcReservedErrorRangeEnd=-32000
	"""
This is the end range of JSON RPC reserved error codes.
It doesn't denote a real error code.

@since 3.16.0
"""
	ServerErrorEnd=-32000
	"""
@deprecated use  jsonrpcReservedErrorRangeEnd
"""

class LSPErrorCodes(Enum):
	
	LspReservedErrorRangeStart=-32899
	"""
This is the start range of LSP reserved error codes.
It doesn't denote a real error code.

@since 3.16.0
"""
	RequestFailed=-32803
	"""
A request failed but it was syntactically correct, e.g the
method name was known and the parameters were valid. The error
message should contain human readable information about why
the request failed.

@since 3.17.0
"""
	ServerCancelled=-32802
	"""
The server cancelled the request. This error code should
only be used for requests that explicitly support being
server cancellable.

@since 3.17.0
"""
	ContentModified=-32801
	"""
The server detected that the content of a document got
modified outside normal conditions. A server should
NOT send this error code if it detects a content change
in it unprocessed messages. The result even computed
on an older state might still be useful for the client.

If a client decides that a result is not of any use anymore
the client should cancel the request.
"""
	RequestCancelled=-32800
	"""
The client has canceled a request and a server as detected
the cancel.
"""
	LspReservedErrorRangeEnd=-32800
	"""
This is the end range of LSP reserved error codes.
It doesn't denote a real error code.

@since 3.16.0
"""

class FoldingRangeKind(Enum):
	"""
A set of predefined range kinds.
"""
	Comment='comment'
	"""
Folding range for a comment
"""
	Imports='imports'
	"""
Folding range for an import or include
"""
	Region='region'
	"""
Folding range for a region (e.g. `#region`)
"""

class SymbolKind(Enum):
	"""
A symbol kind.
"""
	File=1
	Module=2
	Namespace=3
	Package=4
	Class=5
	Method=6
	Property=7
	Field=8
	Constructor=9
	Enum=10
	Interface=11
	Function=12
	Variable=13
	Constant=14
	String=15
	Number=16
	Boolean=17
	Array=18
	Object=19
	Key=20
	Null=21
	EnumMember=22
	Struct=23
	Event=24
	Operator=25
	TypeParameter=26

class SymbolTag(Enum):
	"""
Symbol tags are extra annotations that tweak the rendering of a symbol.

@since 3.16
"""
	Deprecated=1
	"""
Render a symbol as obsolete, usually using a strike-out.
"""

class UniquenessLevel(Enum):
	"""
Moniker uniqueness level to define scope of the moniker.

@since 3.16.0
"""
	Document='document'
	"""
The moniker is only unique inside a document
"""
	Project='project'
	"""
The moniker is unique inside a project for which a dump got created
"""
	Group='group'
	"""
The moniker is unique inside the group to which a project belongs
"""
	Scheme='scheme'
	"""
The moniker is unique inside the moniker scheme.
"""
	Global='global'
	"""
The moniker is globally unique
"""

class MonikerKind(Enum):
	"""
The moniker kind.

@since 3.16.0
"""
	Import='import'
	"""
The moniker represent a symbol that is imported into a project
"""
	Export='export'
	"""
The moniker represents a symbol that is exported from a project
"""
	Local='local'
	"""
The moniker represents a symbol that is local to a project (e.g. a local
variable of a function, a class not visible outside the project, ...)
"""

class InlayHintKind(Enum):
	"""
Inlay hint kinds.

@since 3.17.0
"""
	Type=1
	"""
An inlay hint that for a type annotation.
"""
	Parameter=2
	"""
An inlay hint that is for a parameter.
"""

class MessageType(Enum):
	"""
The message type
"""
	Error=1
	"""
An error message.
"""
	Warning=2
	"""
A warning message.
"""
	Info=3
	"""
An information message.
"""
	Log=4
	"""
A log message.
"""

class TextDocumentSyncKind(Enum):
	"""
Defines how the host (editor) should sync
document changes to the language server.
"""
	Null=0
	"""
Documents should not be synced at all.
"""
	Full=1
	"""
Documents are synced by always sending the full content
of the document.
"""
	Incremental=2
	"""
Documents are synced by sending the full content on open.
After that only incremental updates to the document are
send.
"""

class TextDocumentSaveReason(Enum):
	"""
Represents reasons why a text document is saved.
"""
	Manual=1
	"""
Manually triggered, e.g. by the user pressing save, by starting debugging,
or by an API call.
"""
	AfterDelay=2
	"""
Automatic after a delay.
"""
	FocusOut=3
	"""
When the editor lost focus.
"""

class CompletionItemKind(Enum):
	"""
The kind of a completion entry.
"""
	Text=1
	Method=2
	Function=3
	Constructor=4
	Field=5
	Variable=6
	Class=7
	Interface=8
	Module=9
	Property=10
	Unit=11
	Value=12
	Enum=13
	Keyword=14
	Snippet=15
	Color=16
	File=17
	Reference=18
	Folder=19
	EnumMember=20
	Constant=21
	Struct=22
	Event=23
	Operator=24
	TypeParameter=25

class CompletionItemTag(Enum):
	"""
Completion item tags are extra annotations that tweak the rendering of a completion
item.

@since 3.15.0
"""
	Deprecated=1
	"""
Render a completion as obsolete, usually using a strike-out.
"""

class InsertTextFormat(Enum):
	"""
Defines whether the insert text in a completion item should be interpreted as
plain text or a snippet.
"""
	PlainText=1
	"""
The primary text to be inserted is treated as a plain string.
"""
	Snippet=2
	"""
The primary text to be inserted is treated as a snippet.

A snippet can define tab stops and placeholders with `$1`, `$2`
and `${3:foo}`. `$0` defines the final tab stop, it defaults to
the end of the snippet. Placeholders with equal identifiers are linked,
that is typing in one will update others too.

See also: https://microsoft.github.io/language-server-protocol/specifications/specification-current/#snippet_syntax
"""

class InsertTextMode(Enum):
	"""
How whitespace and indentation is handled during completion
item insertion.

@since 3.16.0
"""
	AsIs=1
	"""
The insertion or replace strings is taken as it is. If the
value is multi line the lines below the cursor will be
inserted using the indentation defined in the string value.
The client will not apply any kind of adjustments to the
string.
"""
	AdjustIndentation=2
	"""
The editor adjusts leading whitespace of new lines so that
they match the indentation up to the cursor of the line for
which the item is accepted.

Consider a line like this: <2tabs><cursor><3tabs>foo. Accepting a
multi line completion item is indented using 2 tabs and all
following lines inserted will be indented using 2 tabs as well.
"""

class DocumentHighlightKind(Enum):
	"""
A document highlight kind.
"""
	Text=1
	"""
A textual occurrence.
"""
	Read=2
	"""
Read-access of a symbol, like reading a variable.
"""
	Write=3
	"""
Write-access of a symbol, like writing to a variable.
"""

class CodeActionKind(Enum):
	"""
A set of predefined code action kinds
"""
	Empty=''
	"""
Empty kind.
"""
	QuickFix='quickfix'
	"""
Base kind for quickfix actions: 'quickfix'
"""
	Refactor='refactor'
	"""
Base kind for refactoring actions: 'refactor'
"""
	RefactorExtract='refactor.extract'
	"""
Base kind for refactoring extraction actions: 'refactor.extract'

Example extract actions:

- Extract method
- Extract function
- Extract variable
- Extract interface from class
- ...
"""
	RefactorInline='refactor.inline'
	"""
Base kind for refactoring inline actions: 'refactor.inline'

Example inline actions:

- Inline function
- Inline variable
- Inline constant
- ...
"""
	RefactorRewrite='refactor.rewrite'
	"""
Base kind for refactoring rewrite actions: 'refactor.rewrite'

Example rewrite actions:

- Convert JavaScript function to class
- Add or remove parameter
- Encapsulate field
- Make method static
- Move method to base class
- ...
"""
	Source='source'
	"""
Base kind for source actions: `source`

Source code actions apply to the entire file.
"""
	SourceOrganizeImports='source.organizeImports'
	"""
Base kind for an organize imports source action: `source.organizeImports`
"""
	SourceFixAll='source.fixAll'
	"""
Base kind for auto-fix source actions: `source.fixAll`.

Fix all actions automatically fix errors that have a clear fix that do not require user input.
They should not suppress errors or perform unsafe fixes such as generating new types or classes.

@since 3.15.0
"""

class TraceValues(Enum):
	
	Off='off'
	"""
Turn tracing off.
"""
	Messages='messages'
	"""
Trace messages only.
"""
	Verbose='verbose'
	"""
Verbose message tracing.
"""

class MarkupKind(Enum):
	"""
Describes the content type that a client supports in various
result literals like `Hover`, `ParameterInfo` or `CompletionItem`.

Please note that `MarkupKinds` must not start with a `$`. This kinds
are reserved for internal usage.
"""
	PlainText='plaintext'
	"""
Plain text is supported as a content format
"""
	Markdown='markdown'
	"""
Markdown is supported as a content format
"""

class PositionEncodingKind(Enum):
	"""
A set of predefined position encoding kinds.

@since 3.17.0
"""
	UTF8='utf-8'
	"""
Character offsets count UTF-8 code units.
"""
	UTF16='utf-16'
	"""
Character offsets count UTF-16 code units.

This is the default and must always be supported
by servers
"""
	UTF32='utf-32'
	"""
Character offsets count UTF-32 code units.

Implementation note: these are the same as Unicode code points,
so this `PositionEncodingKind` may also be used for an
encoding-agnostic representation of character offsets.
"""

class FileChangeType(Enum):
	"""
The file event type
"""
	Created=1
	"""
The file got created.
"""
	Changed=2
	"""
The file got changed.
"""
	Deleted=3
	"""
The file got deleted.
"""

class WatchKind(Enum):
	
	Create=1
	"""
Interested in create events.
"""
	Change=2
	"""
Interested in change events
"""
	Delete=4
	"""
Interested in delete events
"""

class DiagnosticSeverity(Enum):
	"""
The diagnostic's severity.
"""
	Error=1
	"""
Reports an error.
"""
	Warning=2
	"""
Reports a warning.
"""
	Information=3
	"""
Reports an information.
"""
	Hint=4
	"""
Reports a hint.
"""

class DiagnosticTag(Enum):
	"""
The diagnostic tags.

@since 3.15.0
"""
	Unnecessary=1
	"""
Unused or unnecessary code.

Clients are allowed to render diagnostics with this tag faded out instead of having
an error squiggle.
"""
	Deprecated=2
	"""
Deprecated or obsolete code.

Clients are allowed to rendered diagnostics with this tag strike through.
"""

class CompletionTriggerKind(Enum):
	"""
How a completion was triggered
"""
	Invoked=1
	"""
Completion was triggered by typing an identifier (24x7 code
complete), manual invocation (e.g Ctrl+Space) or via API.
"""
	TriggerCharacter=2
	"""
Completion was triggered by a trigger character specified by
the `triggerCharacters` properties of the `CompletionRegistrationOptions`.
"""
	TriggerForIncompleteCompletions=3
	"""
Completion was re-triggered as current completion list is incomplete
"""

class SignatureHelpTriggerKind(Enum):
	"""
How a signature help was triggered.

@since 3.15.0
"""
	Invoked=1
	"""
Signature help was invoked manually by the user or by a command.
"""
	TriggerCharacter=2
	"""
Signature help was triggered by a trigger character.
"""
	ContentChange=3
	"""
Signature help was triggered by the cursor moving or by the document content changing.
"""

class CodeActionTriggerKind(Enum):
	"""
The reason why code actions were requested.

@since 3.17.0
"""
	Invoked=1
	"""
Code actions were explicitly requested by the user or by an extension.
"""
	Automatic=2
	"""
Code actions were requested automatically.

This typically happens when current selection in a file changes, but can
also be triggered when file content changes.
"""

class FileOperationPatternKind(Enum):
	"""
A pattern kind describing if a glob pattern matches a file a folder or
both.

@since 3.16.0
"""
	File='file'
	"""
The pattern matches a file only.
"""
	Folder='folder'
	"""
The pattern matches a folder only.
"""

class NotebookCellKind(Enum):
	"""
A notebook cell kind.

@since 3.17.0
"""
	Markup=1
	"""
A markup-cell is formatted source that is used for display.
"""
	Code=2
	"""
A code-cell is source code.
"""

class ResourceOperationKind(Enum):
	
	Create='create'
	"""
Supports creating new files and folders.
"""
	Rename='rename'
	"""
Supports renaming existing files and folders.
"""
	Delete='delete'
	"""
Supports deleting existing files and folders.
"""

class FailureHandlingKind(Enum):
	
	Abort='abort'
	"""
Applying the workspace change is simply aborted if one of the changes provided
fails. All operations executed before the failing operation stay executed.
"""
	Transactional='transactional'
	"""
All operations are executed transactional. That means they either all
succeed or no changes at all are applied to the workspace.
"""
	TextOnlyTransactional='textOnlyTransactional'
	"""
If the workspace edit contains only textual file changes they are executed transactional.
If resource changes (create, rename or delete file) are part of the change the failure
handling strategy is abort.
"""
	Undo='undo'
	"""
The client tries to undo the operations already executed. But there is no
guarantee that this is succeeding.
"""

class PrepareSupportDefaultBehavior(Enum):
	
	Identifier=1
	"""
The client's default behavior is to select the identifier
according the to language's syntax rule.
"""

class TokenFormat(Enum):
	
	Relative='relative'

class Location(TypedDict):
	"""
Represents a location inside a resource, such as a line
inside a text file.
"""
	pass

class WorkspaceFolder(TypedDict):
	"""
A workspace folder inside a client.
"""
	pass

class DidChangeWorkspaceFoldersParams(TypedDict):
	"""
The parameters of a `workspace/didChangeWorkspaceFolders` notification.
"""
	pass

class ConfigurationParams(TypedDict):
	"""
The parameters of a configuration request.
"""
	pass

class PartialResultParams(TypedDict):
	
	pass

class DocumentColorParams(TypedDict):
	"""
Parameters for a [DocumentColorRequest](#DocumentColorRequest).
"""
	pass

class ColorInformation(TypedDict):
	"""
Represents a color range from a document.
"""
	pass

class ColorPresentationParams(TypedDict):
	"""
Parameters for a [ColorPresentationRequest](#ColorPresentationRequest).
"""
	pass

class ColorPresentation(TypedDict):
	
	pass

class WorkDoneProgressOptions(TypedDict):
	
	pass

class TextDocumentRegistrationOptions(TypedDict):
	"""
General text document registration options.
"""
	pass

class FoldingRangeParams(TypedDict):
	"""
Parameters for a [FoldingRangeRequest](#FoldingRangeRequest).
"""
	pass

class FoldingRange(TypedDict):
	"""
Represents a folding range. To be valid, start and end line must be bigger than zero and smaller
than the number of lines in the document. Clients are free to ignore invalid ranges.
"""
	pass

class SelectionRangeParams(TypedDict):
	"""
A parameter literal used in selection range requests.
"""
	pass

class SelectionRange(TypedDict):
	"""
A selection range represents a part of a selection hierarchy. A selection range
may have a parent selection range that contains it.
"""
	pass

class WorkDoneProgressCreateParams(TypedDict):
	
	pass

class WorkDoneProgressCancelParams(TypedDict):
	
	pass

class CallHierarchyItem(TypedDict):
	"""
Represents programming constructs like functions or constructors in the context
of call hierarchy.

@since 3.16.0
"""
	pass

class CallHierarchyIncomingCallsParams(TypedDict):
	"""
The parameter of a `callHierarchy/incomingCalls` request.

@since 3.16.0
"""
	pass

class CallHierarchyIncomingCall(TypedDict):
	"""
Represents an incoming call, e.g. a caller of a method or constructor.

@since 3.16.0
"""
	pass

class CallHierarchyOutgoingCallsParams(TypedDict):
	"""
The parameter of a `callHierarchy/outgoingCalls` request.

@since 3.16.0
"""
	pass

class CallHierarchyOutgoingCall(TypedDict):
	"""
Represents an outgoing call, e.g. calling a getter from a method or a method from a constructor etc.

@since 3.16.0
"""
	pass

class SemanticTokensParams(TypedDict):
	"""
@since 3.16.0
"""
	pass

class SemanticTokens(TypedDict):
	"""
@since 3.16.0
"""
	pass

class SemanticTokensPartialResult(TypedDict):
	"""
@since 3.16.0
"""
	pass

class SemanticTokensDeltaParams(TypedDict):
	"""
@since 3.16.0
"""
	pass

class SemanticTokensDelta(TypedDict):
	"""
@since 3.16.0
"""
	pass

class SemanticTokensDeltaPartialResult(TypedDict):
	"""
@since 3.16.0
"""
	pass

class SemanticTokensRangeParams(TypedDict):
	"""
@since 3.16.0
"""
	pass

class ShowDocumentParams(TypedDict):
	"""
Params to show a document.

@since 3.16.0
"""
	pass

class ShowDocumentResult(TypedDict):
	"""
The result of a showDocument request.

@since 3.16.0
"""
	pass

class LinkedEditingRanges(TypedDict):
	"""
The result of a linked editing range request.

@since 3.16.0
"""
	pass

class CreateFilesParams(TypedDict):
	"""
The parameters sent in notifications/requests for user-initiated creation of
files.

@since 3.16.0
"""
	pass

class WorkspaceEdit(TypedDict):
	"""
A workspace edit represents changes to many resources managed in the workspace. The edit
should either provide `changes` or `documentChanges`. If documentChanges are present
they are preferred over `changes` if the client can handle versioned document edits.

Since version 3.13.0 a workspace edit can contain resource operations as well. If resource
operations are present clients need to execute the operations in the order in which they
are provided. So a workspace edit for example can consist of the following two changes:
(1) a create file a.txt and (2) a text document edit which insert text into file a.txt.

An invalid sequence (e.g. (1) delete file a.txt and (2) insert text into file a.txt) will
cause failure of the operation. How the client recovers from the failure is described by
the client capability: `workspace.workspaceEdit.failureHandling`
"""
	pass

class FileOperationRegistrationOptions(TypedDict):
	"""
The options to register for file operations.

@since 3.16.0
"""
	pass

class RenameFilesParams(TypedDict):
	"""
The parameters sent in notifications/requests for user-initiated renames of
files.

@since 3.16.0
"""
	pass

class DeleteFilesParams(TypedDict):
	"""
The parameters sent in notifications/requests for user-initiated deletes of
files.

@since 3.16.0
"""
	pass

class Moniker(TypedDict):
	"""
Moniker definition to match LSIF 0.5 moniker definition.

@since 3.16.0
"""
	pass

class TypeHierarchyItem(TypedDict):
	"""
@since 3.17.0
"""
	pass

class TypeHierarchySupertypesParams(TypedDict):
	"""
The parameter of a `typeHierarchy/supertypes` request.

@since 3.17.0
"""
	pass

class TypeHierarchySubtypesParams(TypedDict):
	"""
The parameter of a `typeHierarchy/subtypes` request.

@since 3.17.0
"""
	pass

class InlineValueParams(TypedDict):
	"""
A parameter literal used in inline value requests.

@since 3.17.0
"""
	pass

class InlayHintParams(TypedDict):
	"""
A parameter literal used in inlay hint requests.

@since 3.17.0
"""
	pass

class InlayHint(TypedDict):
	"""
Inlay hint information.

@since 3.17.0
"""
	pass

class DocumentDiagnosticParams(TypedDict):
	"""
Parameters of the document diagnostic request.

@since 3.17.0
"""
	pass

class DocumentDiagnosticReportPartialResult(TypedDict):
	"""
A partial result for a document diagnostic report.

@since 3.17.0
"""
	pass

class DiagnosticServerCancellationData(TypedDict):
	"""
Cancellation data returned from a diagnostic request.

@since 3.17.0
"""
	pass

class WorkspaceDiagnosticParams(TypedDict):
	"""
Parameters of the workspace diagnostic request.

@since 3.17.0
"""
	pass

class WorkspaceDiagnosticReport(TypedDict):
	"""
A workspace diagnostic report.

@since 3.17.0
"""
	pass

class WorkspaceDiagnosticReportPartialResult(TypedDict):
	"""
A partial result for a workspace diagnostic report.

@since 3.17.0
"""
	pass

class DidOpenNotebookDocumentParams(TypedDict):
	"""
The params sent in an open notebook document notification.

@since 3.17.0
"""
	pass

class DidChangeNotebookDocumentParams(TypedDict):
	"""
The params sent in a change notebook document notification.

@since 3.17.0
"""
	pass

class DidSaveNotebookDocumentParams(TypedDict):
	"""
The params sent in a save notebook document notification.

@since 3.17.0
"""
	pass

class DidCloseNotebookDocumentParams(TypedDict):
	"""
The params sent in a close notebook document notification.

@since 3.17.0
"""
	pass

class RegistrationParams(TypedDict):
	
	pass

class UnregistrationParams(TypedDict):
	
	pass

class InitializeResult(TypedDict):
	"""
The result returned from an initialize request.
"""
	pass

class InitializeError(TypedDict):
	"""
The data type of the ResponseError if the
initialize request fails.
"""
	pass

class InitializedParams(TypedDict):
	
	pass

class DidChangeConfigurationParams(TypedDict):
	"""
The parameters of a change configuration notification.
"""
	pass

class DidChangeConfigurationRegistrationOptions(TypedDict):
	
	pass

class ShowMessageParams(TypedDict):
	"""
The parameters of a notification message.
"""
	pass

class ShowMessageRequestParams(TypedDict):
	
	pass

class MessageActionItem(TypedDict):
	
	pass

class LogMessageParams(TypedDict):
	"""
The log message parameters.
"""
	pass

class DidOpenTextDocumentParams(TypedDict):
	"""
The parameters sent in an open text document notification
"""
	pass

class DidChangeTextDocumentParams(TypedDict):
	"""
The change text document notification's parameters.
"""
	pass

class DidCloseTextDocumentParams(TypedDict):
	"""
The parameters sent in a close text document notification
"""
	pass

class DidSaveTextDocumentParams(TypedDict):
	"""
The parameters sent in a save text document notification
"""
	pass

class WillSaveTextDocumentParams(TypedDict):
	"""
The parameters sent in a will save text document notification.
"""
	pass

class TextEdit(TypedDict):
	"""
A text edit applicable to a text document.
"""
	pass

class DidChangeWatchedFilesParams(TypedDict):
	"""
The watched files change notification's parameters.
"""
	pass

class DidChangeWatchedFilesRegistrationOptions(TypedDict):
	"""
Describe options to be used when registered for text document change events.
"""
	pass

class PublishDiagnosticsParams(TypedDict):
	"""
The publish diagnostic notification's parameters.
"""
	pass

class CompletionItem(TypedDict):
	"""
A completion item represents a text snippet that is
proposed to complete text that is being typed.
"""
	pass

class CompletionList(TypedDict):
	"""
Represents a collection of [completion items](#CompletionItem) to be presented
in the editor.
"""
	pass

class Hover(TypedDict):
	"""
The result of a hover request.
"""
	pass

class SignatureHelp(TypedDict):
	"""
Signature help represents the signature of something
callable. There can be multiple signature but only one
active and only one active parameter.
"""
	pass

class DocumentHighlight(TypedDict):
	"""
A document highlight is a range inside a text document which deserves
special attention. Usually a document highlight is visualized by changing
the background color of its range.
"""
	pass

class DocumentSymbolParams(TypedDict):
	"""
Parameters for a [DocumentSymbolRequest](#DocumentSymbolRequest).
"""
	pass

class DocumentSymbol(TypedDict):
	"""
Represents programming constructs like variables, classes, interfaces etc.
that appear in a document. Document symbols can be hierarchical and they
have two ranges: one that encloses its definition and one that points to
its most interesting range, e.g. the range of an identifier.
"""
	pass

class CodeActionParams(TypedDict):
	"""
The parameters of a [CodeActionRequest](#CodeActionRequest).
"""
	pass

class Command(TypedDict):
	"""
Represents a reference to a command. Provides a title which
will be used to represent a command in the UI and, optionally,
an array of arguments which will be passed to the command handler
function when invoked.
"""
	pass

class CodeAction(TypedDict):
	"""
A code action represents a change that can be performed in code, e.g. to fix a problem or
to refactor code.

A CodeAction must set either `edit` and/or a `command`. If both are supplied, the `edit` is applied first, then the `command` is executed.
"""
	pass

class WorkspaceSymbolParams(TypedDict):
	"""
The parameters of a [WorkspaceSymbolRequest](#WorkspaceSymbolRequest).
"""
	pass

class CodeLensParams(TypedDict):
	"""
The parameters of a [CodeLensRequest](#CodeLensRequest).
"""
	pass

class CodeLens(TypedDict):
	"""
A code lens represents a [command](#Command) that should be shown along with
source text, like the number of references, a way to run tests, etc.

A code lens is _unresolved_ when no command is associated to it. For performance
reasons the creation of a code lens and resolving should be done in two stages.
"""
	pass

class DocumentLinkParams(TypedDict):
	"""
The parameters of a [DocumentLinkRequest](#DocumentLinkRequest).
"""
	pass

class DocumentLink(TypedDict):
	"""
A document link is a range in a text document that links to an internal or external resource, like another
text document or a web site.
"""
	pass

class DocumentFormattingParams(TypedDict):
	"""
The parameters of a [DocumentFormattingRequest](#DocumentFormattingRequest).
"""
	pass

class DocumentRangeFormattingParams(TypedDict):
	"""
The parameters of a [DocumentRangeFormattingRequest](#DocumentRangeFormattingRequest).
"""
	pass

class DocumentOnTypeFormattingParams(TypedDict):
	"""
The parameters of a [DocumentOnTypeFormattingRequest](#DocumentOnTypeFormattingRequest).
"""
	pass

class RenameParams(TypedDict):
	"""
The parameters of a [RenameRequest](#RenameRequest).
"""
	pass

class ExecuteCommandParams(TypedDict):
	"""
The parameters of a [ExecuteCommandRequest](#ExecuteCommandRequest).
"""
	pass

class ApplyWorkspaceEditParams(TypedDict):
	"""
The parameters passed via a apply workspace edit request.
"""
	pass

class ApplyWorkspaceEditResult(TypedDict):
	"""
The result returned from the apply workspace edit request.

@since 3.17 renamed from ApplyWorkspaceEditResponse
"""
	pass

class WorkDoneProgressBegin(TypedDict):
	
	pass

class WorkDoneProgressReport(TypedDict):
	
	pass

class WorkDoneProgressEnd(TypedDict):
	
	pass

class SetTraceParams(TypedDict):
	
	pass

class LogTraceParams(TypedDict):
	
	pass

class CancelParams(TypedDict):
	
	pass

class ProgressParams(TypedDict):
	
	pass

class TextDocumentPositionParams(TypedDict):
	"""
A parameter literal used in requests to pass a text document and a position inside that
document.
"""
	pass

class WorkDoneProgressParams(TypedDict):
	
	pass

class LocationLink(TypedDict):
	"""
Represents the connection of two locations. Provides additional metadata over normal [locations](#Location),
including an origin range.
"""
	pass

class Range(TypedDict):
	"""
A range in a text document expressed as (zero-based) start and end positions.

If you want to specify a range that contains a line including the line ending
character(s) then use an end position denoting the start of the next line.
For example:
```ts
{
    start: { line: 5, character: 23 }
    end : { line 6, character : 0 }
}
```
"""
	pass

class ImplementationOptions(TypedDict):
	
	pass

class StaticRegistrationOptions(TypedDict):
	"""
Static registration options to be returned in the initialize
request.
"""
	pass

class TypeDefinitionOptions(TypedDict):
	
	pass

class WorkspaceFoldersChangeEvent(TypedDict):
	"""
The workspace folder change event.
"""
	pass

class ConfigurationItem(TypedDict):
	
	pass

class TextDocumentIdentifier(TypedDict):
	"""
A literal to identify a text document in the client.
"""
	pass

class Color(TypedDict):
	"""
Represents a color in RGBA space.
"""
	pass

class DocumentColorOptions(TypedDict):
	
	pass

class FoldingRangeOptions(TypedDict):
	
	pass

class DeclarationOptions(TypedDict):
	
	pass

class Position(TypedDict):
	"""
Position in a text document expressed as zero-based line and character
offset. Prior to 3.17 the offsets were always based on a UTF-16 string
representation. So a string of the form `a𐐀b` the character offset of the
character `a` is 0, the character offset of `𐐀` is 1 and the character
offset of b is 3 since `𐐀` is represented using two code units in UTF-16.
Since 3.17 clients and servers can agree on a different string encoding
representation (e.g. UTF-8). The client announces it's supported encoding
via the client capability [`general.positionEncodings`](#clientCapabilities).
The value is an array of position encodings the client supports, with
decreasing preference (e.g. the encoding at index `0` is the most preferred
one). To stay backwards compatible the only mandatory encoding is UTF-16
represented via the string `utf-16`. The server can pick one of the
encodings offered by the client and signals that encoding back to the
client via the initialize result's property
[`capabilities.positionEncoding`](#serverCapabilities). If the string value
`utf-16` is missing from the client's capability `general.positionEncodings`
servers can safely assume that the client supports UTF-16. If the server
omits the position encoding in its initialize result the encoding defaults
to the string value `utf-16`. Implementation considerations: since the
conversion from one encoding into another requires the content of the
file / line the conversion is best done where the file is read which is
usually on the server side.

Positions are line end character agnostic. So you can not specify a position
that denotes `\r|\n` or `\n|` where `|` represents the character offset.

@since 3.17.0 - support for negotiated position encoding.
"""
	pass

class SelectionRangeOptions(TypedDict):
	
	pass

class CallHierarchyOptions(TypedDict):
	"""
Call hierarchy options used during static registration.

@since 3.16.0
"""
	pass

class SemanticTokensOptions(TypedDict):
	"""
@since 3.16.0
"""
	pass

class SemanticTokensEdit(TypedDict):
	"""
@since 3.16.0
"""
	pass

class LinkedEditingRangeOptions(TypedDict):
	
	pass

class FileCreate(TypedDict):
	"""
Represents information on a file/folder create.

@since 3.16.0
"""
	pass

class TextDocumentEdit(TypedDict):
	"""
Describes textual changes on a text document. A TextDocumentEdit describes all changes
on a document version Si and after they are applied move the document to version Si+1.
So the creator of a TextDocumentEdit doesn't need to sort the array of edits or do any
kind of ordering. However the edits must be non overlapping.
"""
	pass

class ChangeAnnotation(TypedDict):
	"""
Additional information that describes document changes.

@since 3.16.0
"""
	pass

class FileOperationFilter(TypedDict):
	"""
A filter to describe in which file operation requests or notifications
the server is interested in receiving.

@since 3.16.0
"""
	pass

class FileRename(TypedDict):
	"""
Represents information on a file/folder rename.

@since 3.16.0
"""
	pass

class FileDelete(TypedDict):
	"""
Represents information on a file/folder delete.

@since 3.16.0
"""
	pass

class MonikerOptions(TypedDict):
	
	pass

class TypeHierarchyOptions(TypedDict):
	"""
Type hierarchy options used during static registration.

@since 3.17.0
"""
	pass

class InlineValueContext(TypedDict):
	"""
@since 3.17.0
"""
	pass

class InlineValueText(TypedDict):
	"""
Provide inline value as text.

@since 3.17.0
"""
	pass

class InlineValueVariableLookup(TypedDict):
	"""
Provide inline value through a variable lookup.
If only a range is specified, the variable name will be extracted from the underlying document.
An optional variable name can be used to override the extracted name.

@since 3.17.0
"""
	pass

class InlineValueEvaluatableExpression(TypedDict):
	"""
Provide an inline value through an expression evaluation.
If only a range is specified, the expression will be extracted from the underlying document.
An optional expression can be used to override the extracted expression.

@since 3.17.0
"""
	pass

class InlineValueOptions(TypedDict):
	"""
Inline value options used during static registration.

@since 3.17.0
"""
	pass

class InlayHintLabelPart(TypedDict):
	"""
An inlay hint label part allows for interactive and composite labels
of inlay hints.

@since 3.17.0
"""
	pass

class MarkupContent(TypedDict):
	"""
A `MarkupContent` literal represents a string value which content is interpreted base on its
kind flag. Currently the protocol supports `plaintext` and `markdown` as markup kinds.

If the kind is `markdown` then the value can contain fenced code blocks like in GitHub issues.
See https://help.github.com/articles/creating-and-highlighting-code-blocks/#syntax-highlighting

Here is an example how such a string can be constructed using JavaScript / TypeScript:
```ts
let markdown: MarkdownContent = {
 kind: MarkupKind.Markdown,
 value: [
   '# Header',
   'Some text',
   '```typescript',
   'someCode();',
   '```'
 ].join('\n')
};
```

*Please Note* that clients might sanitize the return markdown. A client could decide to
remove HTML from the markdown to avoid script execution.
"""
	pass

class InlayHintOptions(TypedDict):
	"""
Inlay hint options used during static registration.

@since 3.17.0
"""
	pass

class FullDocumentDiagnosticReport(TypedDict):
	"""
A diagnostic report with a full set of problems.

@since 3.17.0
"""
	pass

class UnchangedDocumentDiagnosticReport(TypedDict):
	"""
A diagnostic report indicating that the last returned
report is still accurate.

@since 3.17.0
"""
	pass

class DiagnosticOptions(TypedDict):
	"""
Diagnostic options.

@since 3.17.0
"""
	pass

class PreviousResultId(TypedDict):
	"""
A previous result id in a workspace pull request.

@since 3.17.0
"""
	pass

class NotebookDocument(TypedDict):
	"""
A notebook document.

@since 3.17.0
"""
	pass

class TextDocumentItem(TypedDict):
	"""
An item to transfer a text document from the client to the
server.
"""
	pass

class VersionedNotebookDocumentIdentifier(TypedDict):
	"""
A versioned notebook document identifier.

@since 3.17.0
"""
	pass

class NotebookDocumentChangeEvent(TypedDict):
	"""
A change event for a notebook document.

@since 3.17.0
"""
	pass

class NotebookDocumentIdentifier(TypedDict):
	"""
A literal to identify a notebook document in the client.

@since 3.17.0
"""
	pass

class Registration(TypedDict):
	"""
General parameters to to register for an notification or to register a provider.
"""
	pass

class Unregistration(TypedDict):
	"""
General parameters to unregister a request or notification.
"""
	pass

class _InitializeParams(TypedDict):
	"""
The initialize parameters
"""
	pass

class WorkspaceFoldersInitializeParams(TypedDict):
	
	pass

class ServerCapabilities(TypedDict):
	"""
Defines the capabilities provided by a language
server.
"""
	pass

class SaveOptions(TypedDict):
	"""
Save options.
"""
	pass

class FileEvent(TypedDict):
	"""
An event describing a file change.
"""
	pass

class FileSystemWatcher(TypedDict):
	
	pass

class Diagnostic(TypedDict):
	"""
Represents a diagnostic, such as a compiler error or warning. Diagnostic objects
are only valid in the scope of a resource.
"""
	pass

class CompletionContext(TypedDict):
	"""
Contains additional information about the context in which a completion request is triggered.
"""
	pass

class CompletionItemLabelDetails(TypedDict):
	"""
Additional details for a completion item label.

@since 3.17.0
"""
	pass

class InsertReplaceEdit(TypedDict):
	"""
A special text edit to provide an insert and a replace operation.

@since 3.16.0
"""
	pass

class CompletionOptions(TypedDict):
	"""
Completion options.
"""
	pass

class HoverOptions(TypedDict):
	"""
Hover options.
"""
	pass

class SignatureHelpContext(TypedDict):
	"""
Additional information about the context in which a signature help request was triggered.

@since 3.15.0
"""
	pass

class SignatureInformation(TypedDict):
	"""
Represents the signature of something callable. A signature
can have a label, like a function-name, a doc-comment, and
a set of parameters.
"""
	pass

class SignatureHelpOptions(TypedDict):
	"""
Server Capabilities for a [SignatureHelpRequest](#SignatureHelpRequest).
"""
	pass

class DefinitionOptions(TypedDict):
	"""
Server Capabilities for a [DefinitionRequest](#DefinitionRequest).
"""
	pass

class ReferenceContext(TypedDict):
	"""
Value-object that contains additional information when
requesting references.
"""
	pass

class ReferenceOptions(TypedDict):
	"""
Reference options.
"""
	pass

class DocumentHighlightOptions(TypedDict):
	"""
Provider options for a [DocumentHighlightRequest](#DocumentHighlightRequest).
"""
	pass

class BaseSymbolInformation(TypedDict):
	"""
A base for all symbol information.
"""
	pass

class DocumentSymbolOptions(TypedDict):
	"""
Provider options for a [DocumentSymbolRequest](#DocumentSymbolRequest).
"""
	pass

class CodeActionContext(TypedDict):
	"""
Contains additional diagnostic information about the context in which
a [code action](#CodeActionProvider.provideCodeActions) is run.
"""
	pass

class CodeActionOptions(TypedDict):
	"""
Provider options for a [CodeActionRequest](#CodeActionRequest).
"""
	pass

class WorkspaceSymbolOptions(TypedDict):
	"""
Server capabilities for a [WorkspaceSymbolRequest](#WorkspaceSymbolRequest).
"""
	pass

class CodeLensOptions(TypedDict):
	"""
Code Lens provider options of a [CodeLensRequest](#CodeLensRequest).
"""
	pass

class DocumentLinkOptions(TypedDict):
	"""
Provider options for a [DocumentLinkRequest](#DocumentLinkRequest).
"""
	pass

class FormattingOptions(TypedDict):
	"""
Value-object describing what options formatting should use.
"""
	pass

class DocumentFormattingOptions(TypedDict):
	"""
Provider options for a [DocumentFormattingRequest](#DocumentFormattingRequest).
"""
	pass

class DocumentRangeFormattingOptions(TypedDict):
	"""
Provider options for a [DocumentRangeFormattingRequest](#DocumentRangeFormattingRequest).
"""
	pass

class DocumentOnTypeFormattingOptions(TypedDict):
	"""
Provider options for a [DocumentOnTypeFormattingRequest](#DocumentOnTypeFormattingRequest).
"""
	pass

class RenameOptions(TypedDict):
	"""
Provider options for a [RenameRequest](#RenameRequest).
"""
	pass

class ExecuteCommandOptions(TypedDict):
	"""
The server capabilities of a [ExecuteCommandRequest](#ExecuteCommandRequest).
"""
	pass

class SemanticTokensLegend(TypedDict):
	"""
@since 3.16.0
"""
	pass

class ResourceOperation(TypedDict):
	"""
A generic resource operation.
"""
	pass

class CreateFileOptions(TypedDict):
	"""
Options to create a file.
"""
	pass

class RenameFileOptions(TypedDict):
	"""
Rename file options
"""
	pass

class DeleteFileOptions(TypedDict):
	"""
Delete file options
"""
	pass

class FileOperationPattern(TypedDict):
	"""
A pattern to describe in which file operation requests or notifications
the server is interested in receiving.

@since 3.16.0
"""
	pass

class LSPObject(TypedDict):
	"""
LSP object definition.
@since 3.17.0
"""
	pass

class NotebookCell(TypedDict):
	"""
A notebook cell.

A cell's document URI must be unique across ALL notebook
cells and can therefore be used to uniquely identify a
notebook cell or the cell's text document.

@since 3.17.0
"""
	pass

class NotebookCellArrayChange(TypedDict):
	"""
A change describing how to move a `NotebookCell`
array from state S to S'.

@since 3.17.0
"""
	pass

class ClientCapabilities(TypedDict):
	"""
Defines the capabilities provided by the client.
"""
	pass

class TextDocumentSyncOptions(TypedDict):
	
	pass

class NotebookDocumentSyncOptions(TypedDict):
	"""
Options specific to a notebook plus its cells
to be synced to the server.

If a selector provides a notebook document
filter but no cell selector all cells of a
matching notebook document will be synced.

If a selector provides no notebook document
filter but only a cell selector all notebook
document that contain at least one matching
cell will be synced.

@since 3.17.0
"""
	pass

class WorkspaceFoldersServerCapabilities(TypedDict):
	
	pass

class FileOperationOptions(TypedDict):
	"""
Options for notifications/requests for user operations on files.

@since 3.16.0
"""
	pass

class CodeDescription(TypedDict):
	"""
Structure to capture a description for an error code.

@since 3.16.0
"""
	pass

class DiagnosticRelatedInformation(TypedDict):
	"""
Represents a related message and source code location for a diagnostic. This should be
used to point to code locations that cause or related to a diagnostics, e.g when duplicating
a symbol in a scope.
"""
	pass

class ParameterInformation(TypedDict):
	"""
Represents a parameter of a callable-signature. A parameter can
have a label and a doc-comment.
"""
	pass

class NotebookCellTextDocumentFilter(TypedDict):
	"""
A notebook cell text document filter denotes a cell text
document by different properties.

@since 3.17.0
"""
	pass

class FileOperationPatternOptions(TypedDict):
	"""
Matching options for the file operation pattern.

@since 3.16.0
"""
	pass

class ExecutionSummary(TypedDict):
	
	pass

class WorkspaceClientCapabilities(TypedDict):
	"""
Workspace specific client capabilities.
"""
	pass

class TextDocumentClientCapabilities(TypedDict):
	"""
Text document specific client capabilities.
"""
	pass

class NotebookDocumentClientCapabilities(TypedDict):
	"""
Capabilities specific to the notebook document support.

@since 3.17.0
"""
	pass

class WindowClientCapabilities(TypedDict):
	
	pass

class GeneralClientCapabilities(TypedDict):
	"""
General client capabilities.

@since 3.16.0
"""
	pass

class RelativePattern(TypedDict):
	"""
A relative pattern is a helper to construct glob patterns that are matched
relatively to a base URI. The common value for a `baseUri` is a workspace
folder root, but it can be another absolute URI as well.

@since 3.17.0
"""
	pass

class WorkspaceEditClientCapabilities(TypedDict):
	
	pass

class DidChangeConfigurationClientCapabilities(TypedDict):
	
	pass

class DidChangeWatchedFilesClientCapabilities(TypedDict):
	
	pass

class WorkspaceSymbolClientCapabilities(TypedDict):
	"""
Client capabilities for a [WorkspaceSymbolRequest](#WorkspaceSymbolRequest).
"""
	pass

class ExecuteCommandClientCapabilities(TypedDict):
	"""
The client capabilities of a [ExecuteCommandRequest](#ExecuteCommandRequest).
"""
	pass

class SemanticTokensWorkspaceClientCapabilities(TypedDict):
	"""
@since 3.16.0
"""
	pass

class CodeLensWorkspaceClientCapabilities(TypedDict):
	"""
@since 3.16.0
"""
	pass

class FileOperationClientCapabilities(TypedDict):
	"""
Capabilities relating to events from file operations by the user in the client.

These events do not come from the file system, they come from user operations
like renaming a file in the UI.

@since 3.16.0
"""
	pass

class InlineValueWorkspaceClientCapabilities(TypedDict):
	"""
Client workspace capabilities specific to inline values.

@since 3.17.0
"""
	pass

class InlayHintWorkspaceClientCapabilities(TypedDict):
	"""
Client workspace capabilities specific to inlay hints.

@since 3.17.0
"""
	pass

class DiagnosticWorkspaceClientCapabilities(TypedDict):
	"""
Workspace client capabilities specific to diagnostic pull requests.

@since 3.17.0
"""
	pass

class TextDocumentSyncClientCapabilities(TypedDict):
	
	pass

class CompletionClientCapabilities(TypedDict):
	"""
Completion client capabilities
"""
	pass

class HoverClientCapabilities(TypedDict):
	
	pass

class SignatureHelpClientCapabilities(TypedDict):
	"""
Client Capabilities for a [SignatureHelpRequest](#SignatureHelpRequest).
"""
	pass

class DeclarationClientCapabilities(TypedDict):
	"""
@since 3.14.0
"""
	pass

class DefinitionClientCapabilities(TypedDict):
	"""
Client Capabilities for a [DefinitionRequest](#DefinitionRequest).
"""
	pass

class TypeDefinitionClientCapabilities(TypedDict):
	"""
Since 3.6.0
"""
	pass

class ImplementationClientCapabilities(TypedDict):
	"""
@since 3.6.0
"""
	pass

class ReferenceClientCapabilities(TypedDict):
	"""
Client Capabilities for a [ReferencesRequest](#ReferencesRequest).
"""
	pass

class DocumentHighlightClientCapabilities(TypedDict):
	"""
Client Capabilities for a [DocumentHighlightRequest](#DocumentHighlightRequest).
"""
	pass

class DocumentSymbolClientCapabilities(TypedDict):
	"""
Client Capabilities for a [DocumentSymbolRequest](#DocumentSymbolRequest).
"""
	pass

class CodeActionClientCapabilities(TypedDict):
	"""
The Client Capabilities of a [CodeActionRequest](#CodeActionRequest).
"""
	pass

class CodeLensClientCapabilities(TypedDict):
	"""
The client capabilities  of a [CodeLensRequest](#CodeLensRequest).
"""
	pass

class DocumentLinkClientCapabilities(TypedDict):
	"""
The client capabilities of a [DocumentLinkRequest](#DocumentLinkRequest).
"""
	pass

class DocumentColorClientCapabilities(TypedDict):
	
	pass

class DocumentFormattingClientCapabilities(TypedDict):
	"""
Client capabilities of a [DocumentFormattingRequest](#DocumentFormattingRequest).
"""
	pass

class DocumentRangeFormattingClientCapabilities(TypedDict):
	"""
Client capabilities of a [DocumentRangeFormattingRequest](#DocumentRangeFormattingRequest).
"""
	pass

class DocumentOnTypeFormattingClientCapabilities(TypedDict):
	"""
Client capabilities of a [DocumentOnTypeFormattingRequest](#DocumentOnTypeFormattingRequest).
"""
	pass

class RenameClientCapabilities(TypedDict):
	
	pass

class FoldingRangeClientCapabilities(TypedDict):
	
	pass

class SelectionRangeClientCapabilities(TypedDict):
	
	pass

class PublishDiagnosticsClientCapabilities(TypedDict):
	"""
The publish diagnostic client capabilities.
"""
	pass

class CallHierarchyClientCapabilities(TypedDict):
	"""
@since 3.16.0
"""
	pass

class SemanticTokensClientCapabilities(TypedDict):
	"""
@since 3.16.0
"""
	pass

class LinkedEditingRangeClientCapabilities(TypedDict):
	"""
Client capabilities for the linked editing range request.

@since 3.16.0
"""
	pass

class MonikerClientCapabilities(TypedDict):
	"""
Client capabilities specific to the moniker request.

@since 3.16.0
"""
	pass

class TypeHierarchyClientCapabilities(TypedDict):
	"""
@since 3.17.0
"""
	pass

class InlineValueClientCapabilities(TypedDict):
	"""
Client capabilities specific to inline values.

@since 3.17.0
"""
	pass

class InlayHintClientCapabilities(TypedDict):
	"""
Inlay hint client capabilities.

@since 3.17.0
"""
	pass

class DiagnosticClientCapabilities(TypedDict):
	"""
Client capabilities specific to diagnostic pull requests.

@since 3.17.0
"""
	pass

class NotebookDocumentSyncClientCapabilities(TypedDict):
	"""
Notebook specific client capabilities.

@since 3.17.0
"""
	pass

class ShowMessageRequestClientCapabilities(TypedDict):
	"""
Show message request client capabilities
"""
	pass

class ShowDocumentClientCapabilities(TypedDict):
	"""
Client capabilities for the showDocument request.

@since 3.16.0
"""
	pass

class RegularExpressionsClientCapabilities(TypedDict):
	"""
Client capabilities specific to regular expressions.

@since 3.16.0
"""
	pass

class MarkdownClientCapabilities(TypedDict):
	"""
Client capabilities specific to the used markdown parser.

@since 3.16.0
"""
	pass

class ImplementationParams(TextDocumentPositionParams, TypedDict):
	
	pass

class TypeDefinitionParams(TextDocumentPositionParams, TypedDict):
	
	pass

class DeclarationParams(TextDocumentPositionParams, TypedDict):
	
	pass

class CallHierarchyPrepareParams(TextDocumentPositionParams, TypedDict):
	"""
The parameter of a `textDocument/prepareCallHierarchy` request.

@since 3.16.0
"""
	pass

class LinkedEditingRangeParams(TextDocumentPositionParams, TypedDict):
	
	pass

class MonikerParams(TextDocumentPositionParams, TypedDict):
	
	pass

class TypeHierarchyPrepareParams(TextDocumentPositionParams, TypedDict):
	"""
The parameter of a `textDocument/prepareTypeHierarchy` request.

@since 3.17.0
"""
	pass

class TextDocumentChangeRegistrationOptions(TextDocumentRegistrationOptions, TypedDict):
	"""
Describe options to be used when registered for text document change events.
"""
	pass

class CompletionParams(TextDocumentPositionParams, TypedDict):
	"""
Completion parameters
"""
	pass

class HoverParams(TextDocumentPositionParams, TypedDict):
	"""
Parameters for a [HoverRequest](#HoverRequest).
"""
	pass

class SignatureHelpParams(TextDocumentPositionParams, TypedDict):
	"""
Parameters for a [SignatureHelpRequest](#SignatureHelpRequest).
"""
	pass

class DefinitionParams(TextDocumentPositionParams, TypedDict):
	"""
Parameters for a [DefinitionRequest](#DefinitionRequest).
"""
	pass

class ReferenceParams(TextDocumentPositionParams, TypedDict):
	"""
Parameters for a [ReferencesRequest](#ReferencesRequest).
"""
	pass

class DocumentHighlightParams(TextDocumentPositionParams, TypedDict):
	"""
Parameters for a [DocumentHighlightRequest](#DocumentHighlightRequest).
"""
	pass

class SymbolInformation(BaseSymbolInformation, TypedDict):
	"""
Represents information about programming constructs like variables, classes,
interfaces etc.
"""
	pass

class WorkspaceSymbol(BaseSymbolInformation, TypedDict):
	"""
A special workspace symbol that supports locations without a range.

See also SymbolInformation.

@since 3.17.0
"""
	pass

class WorkspaceSymbolRegistrationOptions(WorkspaceSymbolOptions, TypedDict):
	"""
Registration options for a [WorkspaceSymbolRequest](#WorkspaceSymbolRequest).
"""
	pass

class PrepareRenameParams(TextDocumentPositionParams, TypedDict):
	
	pass

class ExecuteCommandRegistrationOptions(ExecuteCommandOptions, TypedDict):
	"""
Registration options for a [ExecuteCommandRequest](#ExecuteCommandRequest).
"""
	pass

class CreateFile(ResourceOperation, TypedDict):
	"""
Create file operation.
"""
	pass

class RenameFile(ResourceOperation, TypedDict):
	"""
Rename file operation
"""
	pass

class DeleteFile(ResourceOperation, TypedDict):
	"""
Delete file operation
"""
	pass

class RelatedFullDocumentDiagnosticReport(FullDocumentDiagnosticReport, TypedDict):
	"""
A full diagnostic report with a set of related documents.

@since 3.17.0
"""
	pass

class RelatedUnchangedDocumentDiagnosticReport(UnchangedDocumentDiagnosticReport, TypedDict):
	"""
An unchanged diagnostic report with a set of related documents.

@since 3.17.0
"""
	pass

class VersionedTextDocumentIdentifier(TextDocumentIdentifier, TypedDict):
	"""
A text document identifier to denote a specific version of a text document.
"""
	pass

class OptionalVersionedTextDocumentIdentifier(TextDocumentIdentifier, TypedDict):
	"""
A text document identifier to optionally denote a specific version of a text document.
"""
	pass

class AnnotatedTextEdit(TextEdit, TypedDict):
	"""
A special text edit with an additional change annotation.

@since 3.16.0.
"""
	pass

class WorkspaceFullDocumentDiagnosticReport(FullDocumentDiagnosticReport, TypedDict):
	"""
A full document diagnostic report for a workspace diagnostic result.

@since 3.17.0
"""
	pass

class WorkspaceUnchangedDocumentDiagnosticReport(UnchangedDocumentDiagnosticReport, TypedDict):
	"""
An unchanged document diagnostic report for a workspace diagnostic result.

@since 3.17.0
"""
	pass

class NotebookDocumentSyncRegistrationOptions(NotebookDocumentSyncOptions, TypedDict):
	"""
Registration options specific to a notebook.

@since 3.17.0
"""
	pass

class ImplementationRegistrationOptions(TextDocumentRegistrationOptions, ImplementationOptions, TypedDict):
	
	pass

class TypeDefinitionRegistrationOptions(TextDocumentRegistrationOptions, TypeDefinitionOptions, TypedDict):
	
	pass

class DocumentColorRegistrationOptions(TextDocumentRegistrationOptions, DocumentColorOptions, TypedDict):
	
	pass

class FoldingRangeRegistrationOptions(TextDocumentRegistrationOptions, FoldingRangeOptions, TypedDict):
	
	pass

class DeclarationRegistrationOptions(DeclarationOptions, TextDocumentRegistrationOptions, TypedDict):
	
	pass

class SelectionRangeRegistrationOptions(SelectionRangeOptions, TextDocumentRegistrationOptions, TypedDict):
	
	pass

class CallHierarchyRegistrationOptions(TextDocumentRegistrationOptions, CallHierarchyOptions, TypedDict):
	"""
Call hierarchy options used during static or dynamic registration.

@since 3.16.0
"""
	pass

class SemanticTokensRegistrationOptions(TextDocumentRegistrationOptions, SemanticTokensOptions, TypedDict):
	"""
@since 3.16.0
"""
	pass

class LinkedEditingRangeRegistrationOptions(TextDocumentRegistrationOptions, LinkedEditingRangeOptions, TypedDict):
	
	pass

class MonikerRegistrationOptions(TextDocumentRegistrationOptions, MonikerOptions, TypedDict):
	
	pass

class TypeHierarchyRegistrationOptions(TextDocumentRegistrationOptions, TypeHierarchyOptions, TypedDict):
	"""
Type hierarchy options used during static or dynamic registration.

@since 3.17.0
"""
	pass

class InlineValueRegistrationOptions(InlineValueOptions, TextDocumentRegistrationOptions, TypedDict):
	"""
Inline value options used during static or dynamic registration.

@since 3.17.0
"""
	pass

class InlayHintRegistrationOptions(InlayHintOptions, TextDocumentRegistrationOptions, TypedDict):
	"""
Inlay hint options used during static or dynamic registration.

@since 3.17.0
"""
	pass

class DiagnosticRegistrationOptions(TextDocumentRegistrationOptions, DiagnosticOptions, TypedDict):
	"""
Diagnostic registration options.

@since 3.17.0
"""
	pass

class InitializeParams(_InitializeParams, WorkspaceFoldersInitializeParams, TypedDict):
	
	pass

class TextDocumentSaveRegistrationOptions(TextDocumentRegistrationOptions, SaveOptions, TypedDict):
	"""
Save registration options.
"""
	pass

class CompletionRegistrationOptions(TextDocumentRegistrationOptions, CompletionOptions, TypedDict):
	"""
Registration options for a [CompletionRequest](#CompletionRequest).
"""
	pass

class HoverRegistrationOptions(TextDocumentRegistrationOptions, HoverOptions, TypedDict):
	"""
Registration options for a [HoverRequest](#HoverRequest).
"""
	pass

class SignatureHelpRegistrationOptions(TextDocumentRegistrationOptions, SignatureHelpOptions, TypedDict):
	"""
Registration options for a [SignatureHelpRequest](#SignatureHelpRequest).
"""
	pass

class DefinitionRegistrationOptions(TextDocumentRegistrationOptions, DefinitionOptions, TypedDict):
	"""
Registration options for a [DefinitionRequest](#DefinitionRequest).
"""
	pass

class ReferenceRegistrationOptions(TextDocumentRegistrationOptions, ReferenceOptions, TypedDict):
	"""
Registration options for a [ReferencesRequest](#ReferencesRequest).
"""
	pass

class DocumentHighlightRegistrationOptions(TextDocumentRegistrationOptions, DocumentHighlightOptions, TypedDict):
	"""
Registration options for a [DocumentHighlightRequest](#DocumentHighlightRequest).
"""
	pass

class DocumentSymbolRegistrationOptions(TextDocumentRegistrationOptions, DocumentSymbolOptions, TypedDict):
	"""
Registration options for a [DocumentSymbolRequest](#DocumentSymbolRequest).
"""
	pass

class CodeActionRegistrationOptions(TextDocumentRegistrationOptions, CodeActionOptions, TypedDict):
	"""
Registration options for a [CodeActionRequest](#CodeActionRequest).
"""
	pass

class CodeLensRegistrationOptions(TextDocumentRegistrationOptions, CodeLensOptions, TypedDict):
	"""
Registration options for a [CodeLensRequest](#CodeLensRequest).
"""
	pass

class DocumentLinkRegistrationOptions(TextDocumentRegistrationOptions, DocumentLinkOptions, TypedDict):
	"""
Registration options for a [DocumentLinkRequest](#DocumentLinkRequest).
"""
	pass

class DocumentFormattingRegistrationOptions(TextDocumentRegistrationOptions, DocumentFormattingOptions, TypedDict):
	"""
Registration options for a [DocumentFormattingRequest](#DocumentFormattingRequest).
"""
	pass

class DocumentRangeFormattingRegistrationOptions(TextDocumentRegistrationOptions, DocumentRangeFormattingOptions, TypedDict):
	"""
Registration options for a [DocumentRangeFormattingRequest](#DocumentRangeFormattingRequest).
"""
	pass

class DocumentOnTypeFormattingRegistrationOptions(TextDocumentRegistrationOptions, DocumentOnTypeFormattingOptions, TypedDict):
	"""
Registration options for a [DocumentOnTypeFormattingRequest](#DocumentOnTypeFormattingRequest).
"""
	pass

class RenameRegistrationOptions(TextDocumentRegistrationOptions, RenameOptions, TypedDict):
	"""
Registration options for a [RenameRequest](#RenameRequest).
"""
	pass
